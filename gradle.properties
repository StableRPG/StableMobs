# -- Build Scans (For Analysis & Debugging - Optional) --
# Enable build scans for deep insights into build performance and failures.
# Scans published to scans.gradle.com by default (requires accepting terms of service).
# Uncomment the following line to enable it:
org.gradle.build-scan=true
# ============================================================
#         Gradle Performance Tuning Properties
# ============================================================
# -- Caching (Essential for Speed) --
# Enable the local build cache to reuse task outputs from previous builds.
org.gradle.caching=true
# Enable the configuration cache to reuse the results of the configuration phase.
# Test thoroughly (e.g., run builds with `--configuration-cache` flag first).
org.gradle.configuration-cache=true
# Enable configure-on-demand for multi-module projects.
org.gradle.configureondemand=true
# -- Daemon (Crucial for Performance) --
# Keep a Gradle Daemon process running in the background.
org.gradle.daemon=true
# Configure JVM arguments for the Gradle Daemon (adjust Xmx based on RAM/project).
org.gradle.jvmargs=-Xmx8g -XX:+UseParallelGC
# -- Default Logging & Debugging --
# WARNING: Makes all builds very verbose. Use command-line flags for temporary debugging.
# Sets the default log level (options: quiet, warn, lifecycle, info, debug).
org.gradle.logging.level=info
# Sets default stacktrace detail (options: internal, all, full) (Requires Gradle 7.4+).
org.gradle.logging.stacktrace=full
# -- Parallelism & Concurrency --
# Allow Gradle to execute tasks in parallel when possible.
org.gradle.parallel=true
# -- File System Watching (Improves Incremental Builds) --
# Enable experimental file system watching (requires Gradle 6.7+).
org.gradle.vfs.watch=true
# Set the maximum number of worker processes Gradle can use (e.g., number of CPU cores).
org.gradle.workers.max=8